from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework import status
from yaml import serialize
from .serializers import RegisterSerializer, ForgotPasswordSerializer, ResetPasswordSerializer
from .models import OTP
from rest_framework.permissions import IsAuthenticated
from rest_framework_simplejwt.tokens import RefreshToken
from .serializers import LoginSerializer
import random
from django.contrib.auth import logout
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi


class RegisterView(APIView):
    serializer_class = RegisterSerializer  # ✅ اضافه کردن این خط
    @swagger_auto_schema(
        request_body=RegisterSerializer,
        responses={201: "ثبت‌نام موفق", 400: "خطای درخواست"}
    )
    def post(self, request):
        serializer = self.serializer_class(data=request.data)  # ✅ استفاده از serializer_class
        if serializer.is_valid():
            user = serializer.save()
            return Response({"message": "ثبت‌نام موفق", "user_id": user.id}, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class LoginView(APIView):
    serializer_class = LoginSerializer  # ✅ اضافه کردن این خط
    @swagger_auto_schema(
        request_body=LoginSerializer,
        responses={200: "ورود موفق", 400: "خطای احراز هویت"}
    )
    def post(self, request):
        serializer = self.serializer_class(data=request.data)
        if serializer.is_valid():
            user = serializer.validated_data['user']
            refresh = RefreshToken.for_user(user)
            return Response({
                "message": "ورود موفق",
                "refresh": str(refresh),
                "access": str(refresh.access_token)
            }, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    
    
    
    
class ForgotPasswordView(APIView):
    serializer_class = ForgotPasswordSerializer  
    
    @swagger_auto_schema(
        request_body=ForgotPasswordSerializer,
        responses={200: "کد OTP ارسال شد", 400: "خطا در درخواست"}
    )
    def post(self, request):
        serializer = ForgotPasswordSerializer(data=request.data)
        if serializer.is_valid():
            phone_number = serializer.validated_data["phone_number"]
            otp_code = str(random.randint(100000, 999999))
            OTP.objects.update_or_create(phone_number=phone_number, defaults={"otp_code": otp_code})
            return Response({"message": "کد OTP ارسال شد"}, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class ResetPasswordView(APIView):
    serializer_class = ResetPasswordSerializer
    @swagger_auto_schema(
        request_body=ResetPasswordSerializer,
        responses={200: "رمز عبور تغییر کرد", 400: "خطا در درخواست"}
    )
    def post(self, request):
        serializer = ResetPasswordSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({"message": "رمز عبور با موفقیت تغییر یافت"}, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)




class LogoutView(APIView):
    permission_classes = [IsAuthenticated]  # فقط کاربران لاگین‌شده بتوانند این درخواست را بفرستند

    @swagger_auto_schema(responses={200: "خروج موفق"})
    def post(self, request):
        logout(request)  # حذف سشن کاربر
        return Response({"message": "خروج موفق"}, status=200)

این وییو 

from rest_framework import serializers
from django.contrib.auth import get_user_model, authenticate
from .models import OTP,CustomUser


class RegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, min_length=6)
    confirm_password = serializers.CharField(write_only=True, min_length=6)

    class Meta:
        model = CustomUser
        fields = ['id', 'phone_number', 'username', 'password', 'confirm_password'] 

    def validate(self, attrs):
        if attrs['password'] != attrs['confirm_password']:
            raise serializers.ValidationError({'password': 'رمز عبور و تکرار آن مطابقت ندارند.'})
        return attrs

    def create(self, validated_data):
        validated_data.pop('confirm_password')
        user = CustomUser(
            phone_number=validated_data['phone_number'],
            username=validated_data['username']
        )
        user.set_password(validated_data['password'])
        user.save()
        return user

class LoginSerializer(serializers.Serializer):
    phone_number = serializers.CharField()
    password = serializers.CharField(write_only=True)

    def validate(self, attrs):
        phone_number = attrs.get('phone_number')
        password = attrs.get('password')

        try:
            user = CustomUser.objects.get(phone_number=phone_number)
        except CustomUser.DoesNotExist:
            raise serializers.ValidationError({'error': 'کاربری با این شماره یافت نشد.'})

        if not user.check_password(password):
            raise serializers.ValidationError({'error': 'رمز عبور نادرست است.'})

        attrs['user'] = user
        return attrs
    
    
    
    
    
class ForgotPasswordSerializer(serializers.Serializer):
    phone_number = serializers.CharField()
    
    def validate_phone_number(self, value):
        if not CustomUser.objects.filter(phone_number=value).exists():
            raise serializers.ValidationError('کاربری با این شماره تلفن یافت نشد.')
        return value

class ResetPasswordSerializer(serializers.Serializer):
    phone_number = serializers.CharField()
    otp_code = serializers.CharField()
    new_password = serializers.CharField(write_only=True, min_length=6)
    confirm_password = serializers.CharField(write_only=True, min_length=6)
    
    def validate(self, attrs):
        phone_number = attrs.get('phone_number')
        otp_code = attrs.get('otp_code')
        new_password = attrs.get('new_password')
        confirm_password = attrs.get('confirm_password')
        
        if new_password != confirm_password:
            raise serializers.ValidationError({'password': 'رمز عبور و تکرار آن مطابقت ندارند.'})
        
        if not OTP.objects.filter(phone_number=phone_number, otp_code=otp_code).exists():
            raise serializers.ValidationError({'otp_code': 'کد وارد شده معتبر نیست یا منقضی شده است.'})
        
        return attrs
    
    def save(self):
        phone_number = self.validated_data['phone_number']
        new_password = self.validated_data['new_password']
        
        try:
            user = CustomUser.objects.get(phone_number=phone_number)
        except CustomUser.DoesNotExist:
            raise serializers.ValidationError({'error': 'کاربر یافت نشد.'})

        user.set_password(new_password)
        user.save()

        # حذف تمام OTPهای استفاده‌شده
        OTP.objects.filter(phone_number=phone_number).delete()

        return user

این سریالایزر 


import requests

KAVENEGAR_API_KEY = "API_KEY_شما"

def send_otp_kavenegar(phone_number, otp_code):
    url = f"https://api.kavenegar.com/v1/{KAVENEGAR_API_KEY}/verify/lookup.json"
    params = {
        "receptor": phone_number,
        "token": otp_code,
        "template": "otp_template"
    }

    try:
        response = requests.get(url, params=params)
        data = response.json()
        if data.get("return", {}).get("status") == 200:
            return True
        else:
            print(f"خطا در ارسال OTP: {data}")
            return False
    except Exception as e:
        print(f"خطا در اتصال به کاوه نگار: {e}")
        return False

اینم utils 

میخوام با توجه به این کد ها 

برای لاگین و ریجستری و فراموشی رمز 
از سامانه ارسال پیامک برای برای ورود استفاده کنم 

یعنی کاربر فیلید ها رو میده بعد منتظر میمونه تا کد پیامکی براش ارسال بشه و بعد از وارد کردن اون وارد سایت میشه 
